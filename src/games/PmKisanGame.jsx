// src/games/PMKisan.jsx

import React, { useState, useMemo, useEffect, useRef } from "react";

// --- Audio Assets ---
const successSound = new Audio('https://actions.google.com/sounds/v1/coins/magic_coin_vanish.ogg');
const failureSound = new Audio('https://actions.google.com/sounds/v1/negative/failure.ogg');
const clickSound = new Audio('https://actions.google.com/sounds/v1/ui/ui_pop.ogg');
const stepSound = new Audio('https://actions.google.com/sounds/v1/transitions/transition_woosh.ogg');
const verifyingSound = new Audio('https://actions.google.com/sounds/v1/switches/switch_on.ogg');

// --- Farmer Avatars ---
const farmerAvatars = [
  { id: 'm1', emoji: 'ЁЯзСтАНЁЯМ╛', name: { en: 'Ramesh', hi: 'рд░рдореЗрд╢', ta: 'ро░роорпЗро╖рпН', te: 'р░░р░ор▒Зр░╖р▒Н', kn: 'р▓░р▓ор│Зр▓╢р│Н' } },
  { id: 'f1', emoji: 'ЁЯСйтАНЁЯМ╛', name: { en: 'Sita', hi: 'рд╕реАрддрд╛', ta: 'роЪрпАродро╛', te: 'р░╕р▒Ар░д', kn: 'р▓╕р│Ар▓др▓╛' } },
  { id: 'm2', emoji: 'ЁЯСитАНЁЯж│', name: { en: 'Balram', hi: 'рдмрд▓рд░рд╛рдо', ta: 'рокро▓ро░ро╛роорпН', te: 'р░мр░▓р░░р░╛р░В', kn: 'р▓мр▓▓р▓░р▓╛р▓ор│Н' } },
  { id: 'f2', emoji: 'ЁЯСйтАНЁЯж▒', name: { en: 'Priya', hi: 'рдкреНрд░рд┐рдпрд╛', ta: 'рокро┐ро░ро┐ропро╛', te: 'р░кр▒Нр░░р░┐р░п', kn: 'р▓кр│Нр▓░р▓┐р▓пр▓╛' } },
];

// --- Multilingual Content ---
const gameData = {
  en: {
    langName: "English",
    title: "ЁЯМ╛ PM-Kisan Journey ЁЯМ╛",
    gameSteps: {
      characterSelection: { title: "Choose Your Farmer", description: "Select a character to represent you on this journey." },
      start: { title: "Welcome, {farmerName}!", description: "Experience the journey of a PM-Kisan beneficiary. Let's see if you are eligible and how you receive the benefits.", button: "Start the Journey" },
      eligibility: {
        title: "Step 1: Eligibility Check",
        description: "Answer these questions to check your eligibility for the scheme.",
        questions: [{ key: 'isSmallFarmer', text: "Are you a small or marginal farmer family?" }, { key: 'isLandOwner', text: "Do you own cultivable land?" }, { key: 'isNotHighIncome', text: "Is your family's income below the high-income exclusion criteria?" }],
        button: "Check My Eligibility",
      },
      ekyc: { title: "Step 2: Complete eKYC", description: "Great! You seem eligible. The next mandatory step is to complete your eKYC using your Aadhaar. This is crucial for receiving funds.", button: "Verify with Aadhaar eKYC", verifyingText: "Verifying... Please wait." },
      installments: { title: "Step 3: Receive Your Installments", description: "Congratulations! Your account is active. Claim your installments as they are released by the government.", claimButton: "Claim тВ╣2000", receivedStatus: "тЬЕ Received", accountBalance: "Your Samman Nidhi Balance:", status: { locked: "Locked", claimable: "Ready to Claim", releasedOn: "Released" } },
      results: { eligibleTitle: "ЁЯОЙ Journey Complete! ЁЯОЙ", eligibleMessage: "You have successfully received the full benefit of тВ╣6,000 for the year! This support helps farmers with their agricultural needs.", ineligibleTitle: "Eligibility Check Failed", ineligibleMessage: "Based on your answers, you may not be eligible for the PM-Kisan scheme. This scheme is for land-holding farmer families who meet specific criteria.", reason: "Reason for ineligibility:" },
    },
    common: { yes: "Yes", no: "No", playAgain: "Start a New Journey", helplineText: "For official information or help, visit the PM-Kisan Portal or call the helpline:", helplineNumber: "011-24300606, 155261", websiteLinkText: "Visit PM-Kisan Portal", progress: "Journey Progress", selectLanguage: "Language" },
  },
  hi: {
    langName: "рд╣рд┐рдиреНрджреА",
    title: "ЁЯМ╛ рдкреАрдПрдо-рдХрд┐рд╕рд╛рди рдпрд╛рддреНрд░рд╛ ЁЯМ╛",
    gameSteps: {
      characterSelection: { title: "рдЕрдкрдиреЗ рдХрд┐рд╕рд╛рди рдХрд╛ рдЪрдпрди рдХрд░реЗрдВ", description: "рдЗрд╕ рдпрд╛рддреНрд░рд╛ рдкрд░ рдЖрдкрдХрд╛ рдкреНрд░рддрд┐рдирд┐рдзрд┐рддреНрд╡ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рдкрд╛рддреНрд░ рдЪреБрдиреЗрдВред" },
      start: { title: "рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ, {farmerName}!", description: "рдкреАрдПрдо-рдХрд┐рд╕рд╛рди рд▓рд╛рднрд╛рд░реНрдереА рдХреА рдпрд╛рддреНрд░рд╛ рдХрд╛ рдЕрдиреБрднрд╡ рдХрд░реЗрдВред рдЖрдЗрдП рджреЗрдЦреЗрдВ рдХрд┐ рдХреНрдпрд╛ рдЖрдк рдкрд╛рддреНрд░ рд╣реИрдВ рдФрд░ рдЖрдк рд▓рд╛рдн рдХреИрд╕реЗ рдкреНрд░рд╛рдкреНрдд рдХрд░рддреЗ рд╣реИрдВред", button: "рдпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ" },
      eligibility: {
        title: "рдЪрд░рдг 1: рдкрд╛рддреНрд░рддрд╛ рдЬрд╛рдВрдЪ", description: "рдпреЛрдЬрдирд╛ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдкрд╛рддреНрд░рддрд╛ рдЬрд╛рдВрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рдЗрди рд╕рд╡рд╛рд▓реЛрдВ рдХреЗ рдЬрд╡рд╛рдм рджреЗрдВред",
        questions: [{ key: 'isSmallFarmer', text: "рдХреНрдпрд╛ рдЖрдк рдПрдХ рдЫреЛрдЯреЗ рдпрд╛ рд╕реАрдорд╛рдВрдд рдХрд┐рд╕рд╛рди рдкрд░рд┐рд╡рд╛рд░ рд╕реЗ рд╣реИрдВ?" }, { key: 'isLandOwner', text: "рдХреНрдпрд╛ рдЖрдкрдХреЗ рдкрд╛рд╕ рдЦреЗрддреА рдпреЛрдЧреНрдп рднреВрдорд┐ рд╣реИ?" }, { key: 'isNotHighIncome', text: "рдХреНрдпрд╛ рдЖрдкрдХреЗ рдкрд░рд┐рд╡рд╛рд░ рдХреА рдЖрдп рдЙрдЪреНрдЪ-рдЖрдп рдмрд╣рд┐рд╖реНрдХрд░рдг рдорд╛рдирджрдВрдбреЛрдВ рд╕реЗ рдиреАрдЪреЗ рд╣реИ?" }],
        button: "рдореЗрд░реА рдкрд╛рддреНрд░рддрд╛ рдЬрд╛рдВрдЪреЗрдВ",
      },
      ekyc: { title: "рдЪрд░рдг 2: eKYC рдкреВрд░рд╛ рдХрд░реЗрдВ", description: "рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! рдЖрдк рдкрд╛рддреНрд░ рд▓рдЧрддреЗ рд╣реИрдВред рдЕрдЧрд▓рд╛ рдЕрдирд┐рд╡рд╛рд░реНрдп рдХрджрдо рдЕрдкрдиреЗ рдЖрдзрд╛рд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдЕрдкрдирд╛ eKYC рдкреВрд░рд╛ рдХрд░рдирд╛ рд╣реИред рдпрд╣ рдзрдирд░рд╛рд╢рд┐ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИред", button: "рдЖрдзрд╛рд░ eKYC рд╕реЗ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ", verifyingText: "рд╕рддреНрдпрд╛рдкрд┐рдд рд╣реЛ рд░рд╣рд╛ рд╣реИ... рдХреГрдкрдпрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВред" },
      installments: { title: "рдЪрд░рдг 3: рдЕрдкрдиреА рдХрд┐рд╕реНрддреЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ", description: "рдмрдзрд╛рдИ рд╣реЛ! рдЖрдкрдХрд╛ рдЦрд╛рддрд╛ рд╕рдХреНрд░рд┐рдп рд╣реИред рд╕рд░рдХрд╛рд░ рджреНрд╡рд╛рд░рд╛ рдЬрд╛рд░реА рд╣реЛрддреЗ рд╣реА рдЕрдкрдиреА рдХрд┐рд╕реНрддреЗрдВ рдХреНрд▓реЗрдо рдХрд░реЗрдВред", claimButton: "тВ╣2000 рдХреНрд▓реЗрдо рдХрд░реЗрдВ", receivedStatus: "тЬЕ рдкреНрд░рд╛рдкреНрдд рд╣реБрдЖ", accountBalance: "рдЖрдкрдХрд╛ рд╕рдореНрдорд╛рди рдирд┐рдзрд┐ рдмреИрд▓реЗрдВрд╕:", status: { locked: "рдмрдВрдж рд╣реИ", claimable: "рдХреНрд▓реЗрдо рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░", releasedOn: "рдЬрд╛рд░реА" } },
      results: { eligibleTitle: "ЁЯОЙ рдпрд╛рддреНрд░рд╛ рдкреВрд░реА рд╣реБрдИ! ЁЯОЙ", eligibleMessage: "рдЖрдкрдиреЗ рд╡рд░реНрд╖ рдХреЗ рд▓рд┐рдП тВ╣6,000 рдХрд╛ рдкреВрд░рд╛ рд▓рд╛рдн рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреНрд░рд╛рдкреНрдд рдХрд░ рд▓рд┐рдпрд╛ рд╣реИ! рдпрд╣ рд╕рдорд░реНрдерди рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рдЙрдирдХреА рдХреГрд╖рд┐ рдЖрд╡рд╢реНрдпрдХрддрд╛рдУрдВ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИред", ineligibleTitle: "рдкрд╛рддреНрд░рддрд╛ рдЬрд╛рдВрдЪ рд╡рд┐рдлрд▓", ineligibleMessage: "рдЖрдкрдХреЗ рдЙрддреНрддрд░реЛрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдЖрдк рдкреАрдПрдо-рдХрд┐рд╕рд╛рди рдпреЛрдЬрдирд╛ рдХреЗ рд▓рд┐рдП рдкрд╛рддреНрд░ рдирд╣реАрдВ рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВред рдпрд╣ рдпреЛрдЬрдирд╛ рднреВрдорд┐-рдзрд╛рд░рдХ рдХрд┐рд╕рд╛рди рдкрд░рд┐рд╡рд╛рд░реЛрдВ рдХреЗ рд▓рд┐рдП рд╣реИ рдЬреЛ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдорд╛рдирджрдВрдбреЛрдВ рдХреЛ рдкреВрд░рд╛ рдХрд░рддреЗ рд╣реИрдВред", reason: "рдЕрдкрд╛рддреНрд░рддрд╛ рдХрд╛ рдХрд╛рд░рдг:" },
    },
    common: { yes: "рд╣рд╛рдБ", no: "рдирд╣реАрдВ", playAgain: "рдПрдХ рдирдИ рдпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ", helplineText: "рдЖрдзрд┐рдХрд╛рд░рд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП, рдкреАрдПрдо-рдХрд┐рд╕рд╛рди рдкреЛрд░реНрдЯрд▓ рдкрд░ рдЬрд╛рдПрдВ рдпрд╛ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ:", helplineNumber: "011-24300606, 155261", websiteLinkText: "рдкреАрдПрдо-рдХрд┐рд╕рд╛рди рдкреЛрд░реНрдЯрд▓ рдкрд░ рдЬрд╛рдПрдВ", progress: "рдпрд╛рддреНрд░рд╛ рдкреНрд░рдЧрддрд┐", selectLanguage: "рднрд╛рд╖рд╛" },
  },
  ta: {
    langName: "родрооро┐ро┤рпН",
    title: "ЁЯМ╛ рокро┐роОроорпН-роХро┐роЪро╛ройрпН рокропрогроорпН ЁЯМ╛",
    gameSteps: {
      characterSelection: { title: "роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛ропро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроЩрпНроХро│рпН", description: "роЗроирпНродрокрпН рокропрогродрпНродро┐ро▓рпН роЙроЩрпНроХро│рпИрокрпН рокро┐ро░родро┐роиро┐родро┐родрпНродрпБро╡рокрпНрокроЯрпБродрпНрод роТро░рпБ рокро╛родрпНродро┐ро░родрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН." },
      start: { title: "ро╡ро░рпБроХ, {farmerName}!", description: "рокро┐роОроорпН-роХро┐роЪро╛ройрпН рокропройро╛ро│ро┐ропро┐ройрпН рокропрогродрпНродрпИ роЕройрпБрокро╡ро┐ропрпБроЩрпНроХро│рпН. роирпАроЩрпНроХро│рпН родроХрпБродро┐ропро╛ройро╡ро░ро╛ рооро▒рпНро▒рпБроорпН рокро▓ройрпНроХро│рпИ роОро╡рпНро╡ро╛ро▒рпБ рокрпЖро▒рпБро╡рпАро░рпНроХро│рпН роОройрпНро▒рпБ рокро╛ро░рпНрокрпНрокрпЛроорпН.", button: "рокропрогродрпНродрпИродрпН родрпКроЯроЩрпНроХрпБ" },
      eligibility: {
        title: "рокроЯро┐ 1: родроХрпБродро┐ роЪрпЛродройрпИ", description: "родро┐роЯрпНроЯродрпНродро┐ро▒рпНроХро╛рой роЙроЩрпНроХро│рпН родроХрпБродро┐ропрпИроЪрпН роЪро░ро┐рокро╛ро░рпНроХрпНроХ роЗроирпНродроХрпН роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБ рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН.",
        questions: [{ key: 'isSmallFarmer', text: "роирпАроЩрпНроХро│рпН роТро░рпБ роЪро┐ро▒рпБ роЕро▓рпНро▓родрпБ роХрпБро▒рпБ ро╡ро┐ро╡роЪро╛ропро┐ роХрпБроЯрпБроорпНрокрооро╛?" }, { key: 'isLandOwner', text: "роЙроЩрпНроХро│рпБроХрпНроХрпБ ро╡ро┐ро╡роЪро╛роп роиро┐ро▓роорпН роЙро│рпНро│родро╛?" }, { key: 'isNotHighIncome', text: "роЙроЩрпНроХро│рпН роХрпБроЯрпБроорпНрок ро╡ро░рпБрооро╛ройроорпН роЙропро░рпН ро╡ро░рпБрооро╛рой ро╡ро┐ро▓роХрпНроХрпБ ро╡ро░роорпНрокро┐ро▒рпНроХрпБроХрпН роХрпАро┤рпЗ роЙро│рпНро│родро╛?" }],
        button: "роОройродрпБ родроХрпБродро┐ропрпИроЪрпН роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН",
      },
      ekyc: { title: "рокроЯро┐ 2: eKYC-роР роорпБроЯро┐роХрпНроХро╡рпБроорпН", description: "роЕро░рпБроорпИ! роирпАроЩрпНроХро│рпН родроХрпБродро┐ропро╛ройро╡ро░рпН. роЕроЯрпБродрпНрод роХроЯрпНроЯро╛роп рокроЯро┐ роЙроЩрпНроХро│рпН роЖродро╛ро░рпН рокропройрпНрокроЯрпБродрпНродро┐ eKYC-роР роорпБроЯро┐рокрпНрокродро╛роХрпБроорпН. роЗродрпБ роиро┐родро┐ рокрпЖро▒рпБро╡родро▒рпНроХрпБ роорпБроХрпНроХро┐ропрооро╛ройродрпБ.", button: "роЖродро╛ро░рпН eKYC роорпВро▓роорпН роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН", verifyingText: "роЪро░ро┐рокро╛ро░рпНроХрпНроХро┐ро▒родрпБ... р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤Хр┤╛р┤др╡Нр┤др┤┐р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х." },
      installments: { title: "рокроЯро┐ 3: родро╡рогрпИроХро│рпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН", description: "ро╡ро╛ро┤рпНродрпНродрпБроХрпНроХро│рпН! роЙроЩрпНроХро│рпН роХрогроХрпНроХрпБ роЪрпЖропро▓ро┐ро▓рпН роЙро│рпНро│родрпБ. роЕро░роЪро╛роЩрпНроХроорпН ро╡рпЖро│ро┐ропро┐роЯрпБроорпНрокрпЛродрпБ роЙроЩрпНроХро│рпН родро╡рогрпИроХро│рпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН.", claimButton: "тВ╣2000 роХрпЛро░рпБроЩрпНроХро│рпН", receivedStatus: "тЬЕ рокрпЖро▒рокрпНрокроЯрпНроЯродрпБ", accountBalance: "роЙроЩрпНроХро│рпН роЪроорпНрооро╛ройрпН роиро┐родро┐ роЗро░рпБрокрпНрокрпБ:", status: { locked: "рокрпВроЯрпНроЯрокрпНрокроЯрпНроЯродрпБ", claimable: "роХро┐ро│рпИроорпН роЪрпЖропрпНроп родропро╛ро░рпН", releasedOn: "ро╡рпЖро│ро┐ропро┐роЯрокрпНрокроЯрпНроЯродрпБ" } },
      results: { eligibleTitle: "ЁЯОЙ рокропрогроорпН роорпБроЯро┐роирпНродродрпБ! ЁЯОЙ", eligibleMessage: "роирпАроЩрпНроХро│рпН роЗроирпНрод роЖрогрпНроЯро┐ро▒рпНроХро╛рой тВ╣6,000 роорпБро┤рпБрокрпН рокропройрпИропрпБроорпН ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХрокрпН рокрпЖро▒рпНро▒рпБро│рпНро│рпАро░рпНроХро│рпН! роЗроирпНрод роЖродро░ро╡рпБ ро╡ро┐ро╡роЪро╛ропро┐роХро│рпБроХрпНроХрпБ роЕро╡ро░рпНроХро│ро┐ройрпН ро╡ро┐ро╡роЪро╛роп родрпЗро╡рпИроХро│рпБроХрпНроХрпБ роЙродро╡рпБроХро┐ро▒родрпБ.", ineligibleTitle: "родроХрпБродро┐ роЪрпЛродройрпИ родрпЛро▓рпНро╡ро┐", ineligibleMessage: "роЙроЩрпНроХро│рпН рокродро┐ро▓рпНроХро│ро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роирпАроЩрпНроХро│рпН рокро┐роОроорпН-роХро┐роЪро╛ройрпН родро┐роЯрпНроЯродрпНродро┐ро▒рпНроХрпБродрпН родроХрпБродро┐ропро▒рпНро▒ро╡ро░ро╛роХ роЗро░рпБроХрпНроХро▓ро╛роорпН. роЗроирпНродродрпН родро┐роЯрпНроЯроорпН роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ родроХрпБродро┐роХро│рпИрокрпН рокрпВро░рпНродрпНродро┐ роЪрпЖропрпНропрпБроорпН роиро┐ро▓ роЙро░ро┐роорпИропро╛ро│ро░рпН ро╡ро┐ро╡роЪро╛ропро┐роХро│рпБроХрпНроХро╛ройродрпБ.", reason: "родроХрпБродро┐ропро▒рпНро▒родро▒рпНроХро╛рой роХро╛ро░рогроорпН:" },
    },
    common: { yes: "роЖроорпН", no: "роЗро▓рпНро▓рпИ", playAgain: "рокрпБродро┐роп рокропрогродрпНродрпИродрпН родрпКроЯроЩрпНроХрпБ", helplineText: "роЕродро┐роХро╛ро░рокрпНрокрпВро░рпНро╡ родроХро╡ро▓рпН роЕро▓рпНро▓родрпБ роЙродро╡ро┐роХрпНроХрпБ, рокро┐роОроорпН-роХро┐роЪро╛ройрпН рокрпЛро░рпНроЯрпНроЯро▓рпИрокрпН рокро╛ро░рпНро╡рпИропро┐роЯро╡рпБроорпН роЕро▓рпНро▓родрпБ ро╣рпЖро▓рпНрокрпНро▓рпИройрпИ роЕро┤рпИроХрпНроХро╡рпБроорпН:", helplineNumber: "011-24300606, 155261", websiteLinkText: "рокро┐роОроорпН-роХро┐роЪро╛ройрпН рокрпЛро░рпНроЯрпНроЯро▓рпИрокрпН рокро╛ро░рпНро╡рпИропро┐роЯро╡рпБроорпН", progress: "рокропрог роорпБройрпНройрпЗро▒рпНро▒роорпН", selectLanguage: "роорпКро┤ро┐" },
  },
  te: {
    langName: "р░др▒Жр░▓р▒Бр░Чр▒Б",
    title: "ЁЯМ╛ р░кр▒Ар░Ор░В-р░Хр░┐р░╕р░╛р░ир▒Н р░кр▒Нр░░р░пр░╛р░гр░В ЁЯМ╛",
    gameSteps: {
      characterSelection: { title: "р░ор▒А р░░р▒Ир░др▒Бр░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐", description: "р░И р░кр▒Нр░░р░пр░╛р░гр░Вр░▓р▒Л р░ор▒Ар░Хр▒Б р░кр▒Нр░░р░╛р░др░┐р░ир░┐р░зр▒Нр░пр░В р░╡р░╣р░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░Тр░Х р░кр░╛р░др▒Нр░░р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐." },
      start: { title: "р░╕р▒Нр░╡р░╛р░Чр░др░В, {farmerName}!", description: "р░кр▒Ар░Ор░В-р░Хр░┐р░╕р░╛р░ир▒Н р░▓р░мр▒Нр░зр░┐р░жр░╛р░░р▒Бр░ир░┐ р░кр▒Нр░░р░пр░╛р░гр░╛р░ир▒Нр░ир░┐ р░Ер░ир▒Бр░нр░╡р░┐р░Вр░Ър░Вр░бр░┐. р░ор▒Ар░░р▒Б р░Ер░░р▒Нр░╣р▒Бр░▓р░╛ р░ор░░р░┐р░пр▒Б р░кр▒Нр░░р░пр▒Лр░Ьр░ир░╛р░▓р░ир▒Б р░Ор░▓р░╛ р░кр▒Кр░Вр░жр▒Бр░др░╛р░░р▒Л р░Ър▒Вр░жр▒Нр░жр░╛р░В.", button: "р░кр▒Нр░░р░пр░╛р░гр░В р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐" },
      eligibility: {
        title: "р░жр░╢ 1: р░Ер░░р▒Нр░╣р░д р░др░ир░┐р░Цр▒А", description: "р░кр░ер░Хр░В р░Хр▒Лр░╕р░В р░ор▒А р░Ер░░р▒Нр░╣р░др░ир▒Б р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░И р░кр▒Нр░░р░╢р▒Нр░ир░▓р░Хр▒Б р░╕р░ор░╛р░зр░╛р░ир░В р░Зр░╡р▒Нр░╡р░Вр░бр░┐.",
        questions: [{ key: 'isSmallFarmer', text: "р░ор▒Ар░░р▒Б р░Ър░┐р░ир▒Нр░и р░▓р▒Зр░жр░╛ р░╕р░ир▒Нр░ир░Хр░╛р░░р▒Б р░░р▒Ир░др▒Б р░Хр▒Бр░Яр▒Бр░Вр░мр░ор░╛?" }, { key: 'isLandOwner', text: "р░ор▒Ар░Хр▒Б р░╕р░╛р░Чр▒Бр░Хр▒Б р░пр▒Лр░Чр▒Нр░пр░ор▒Ир░и р░нр▒Вр░ор░┐ р░Йр░Вр░жр░╛?" }, { key: 'isNotHighIncome', text: "р░ор▒А р░Хр▒Бр░Яр▒Бр░Вр░м р░Жр░жр░╛р░пр░В р░Ер░зр░┐р░Х-р░Жр░жр░╛р░п р░ор░┐р░ир░╣р░╛р░пр░┐р░Вр░кр▒Б р░кр▒Нр░░р░ор░╛р░гр░╛р░▓ р░Хр░Вр░Яр▒З р░др░Хр▒Нр░Хр▒Бр░╡р░Чр░╛ р░Йр░Вр░жр░╛?" }],
        button: "р░ир░╛ р░Ер░░р▒Нр░╣р░др░ир▒Б р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐",
      },
      ekyc: { title: "р░жр░╢ 2: eKYC р░кр▒Вр░░р▒Нр░др░┐ р░Ър▒Зр░пр░Вр░бр░┐", description: "р░Ер░жр▒Нр░нр▒Бр░др░В! р░ор▒Ар░░р▒Б р░Ер░░р▒Нр░╣р▒Бр░▓р▒Бр░Чр░╛ р░Хр░ир░┐р░кр░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░░р▒Б. р░др░жр▒Бр░кр░░р░┐ р░др░кр▒Нр░кр░ир░┐р░╕р░░р░┐ р░жр░╢ р░ор▒А р░Жр░зр░╛р░░р▒Н р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░┐ eKYC р░кр▒Вр░░р▒Нр░др░┐ р░Ър▒Зр░пр░бр░В. р░ир░┐р░зр▒Бр░▓р▒Б р░╕р▒Нр░╡р▒Ар░Хр░░р░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░Зр░жр░┐ р░Ър░╛р░▓р░╛ р░ор▒Бр░Цр▒Нр░пр░В.", button: "р░Жр░зр░╛р░░р▒Н eKYCр░др▒Л р░зр▒Гр░╡р▒Ар░Хр░░р░┐р░Вр░Ър░Вр░бр░┐", verifyingText: "р░зр▒Гр░╡р▒Ар░Хр░░р░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐... р░жр░пр░Ър▒Зр░╕р░┐ р░╡р▒Зр░Ър░┐ р░Йр░Вр░бр░Вр░бр░┐." },
      installments: { title: "р░жр░╢ 3: р░ор▒А р░╡р░╛р░пр░┐р░жр░╛р░▓р░ир▒Б р░кр▒Кр░Вр░жр░Вр░бр░┐", description: "р░Ер░нр░┐р░ир░Вр░жр░ир░▓р▒Б! р░ор▒А р░Цр░╛р░др░╛ р░Ър▒Бр░░р▒Бр░Хр▒Бр░Чр░╛ р░Йр░Вр░жр░┐. р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡р░В р░╡р░┐р░бр▒Бр░жр░▓ р░Ър▒Зр░╕р░┐р░ир░кр▒Нр░кр▒Бр░бр▒Б р░ор▒А р░╡р░╛р░пр░┐р░жр░╛р░▓р░ир▒Б р░Хр▒Нр░▓р▒Жр░пр░┐р░ор▒Н р░Ър▒Зр░пр░Вр░бр░┐.", claimButton: "тВ╣2000 р░Хр▒Нр░▓р▒Жр░пр░┐р░ор▒Н р░Ър▒Зр░пр░Вр░бр░┐", receivedStatus: "тЬЕ р░╕р▒Нр░╡р▒Ар░Хр░░р░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐", accountBalance: "р░ор▒А р░╕р░ор▒Нр░ор░╛р░ир▒Н р░ир░┐р░зр░┐ р░мр▒Нр░пр░╛р░▓р▒Жр░ир▒Нр░╕р▒Н:", status: { locked: "р░▓р░╛р░Хр▒Н р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐", claimable: "р░Хр▒Нр░▓р▒Жр░пр░┐р░ор▒Н р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░╕р░┐р░жр▒Нр░зр░Вр░Чр░╛ р░Йр░Вр░жр░┐", releasedOn: "р░╡р░┐р░бр▒Бр░жр░▓ р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐" } },
      results: { eligibleTitle: "ЁЯОЙ р░кр▒Нр░░р░пр░╛р░гр░В р░кр▒Вр░░р▒Нр░др░пр░┐р░Вр░жр░┐! ЁЯОЙ", eligibleMessage: "р░ор▒Ар░░р▒Б р░╕р░Вр░╡р░др▒Нр░╕р░░р░╛р░ир░┐р░Хр░┐ тВ╣6,000 р░кр▒Вр░░р▒Нр░др░┐ р░кр▒Нр░░р░пр▒Лр░Ьр░ир░╛р░ир▒Нр░ир░┐ р░╡р░┐р░Ьр░пр░╡р░Вр░др░Вр░Чр░╛ р░кр▒Кр░Вр░жр░╛р░░р▒Б! р░И р░ор░жр▒Нр░жр░др▒Б р░░р▒Ир░др▒Бр░▓р░Хр▒Б р░╡р░╛р░░р░┐ р░╡р▒Нр░пр░╡р░╕р░╛р░п р░Ер░╡р░╕р░░р░╛р░▓р░Хр▒Б р░╕р░╣р░╛р░пр░кр░бр▒Бр░др▒Бр░Вр░жр░┐.", ineligibleTitle: "р░Ер░░р▒Нр░╣р░д р░др░ир░┐р░Цр▒А р░╡р░┐р░лр░▓р░ор▒Ир░Вр░жр░┐", ineligibleMessage: "р░ор▒А р░╕р░ор░╛р░зр░╛р░ир░╛р░▓ р░Жр░зр░╛р░░р░Вр░Чр░╛, р░ор▒Ар░░р▒Б р░кр▒Ар░Ор░В-р░Хр░┐р░╕р░╛р░ир▒Н р░кр░ер░Хр░╛р░ир░┐р░Хр░┐ р░Ер░░р▒Нр░╣р▒Бр░▓р▒Б р░Хр░╛р░Хр░кр▒Лр░╡р░Ър▒Нр░Ър▒Б. р░И р░кр░ер░Хр░В р░ир░┐р░░р▒Нр░жр░┐р░╖р▒Нр░Я р░кр▒Нр░░р░ор░╛р░гр░╛р░▓р░ир▒Б р░кр░╛р░Яр░┐р░Вр░Ър▒З р░нр▒Вр░ор░┐-р░Чр░▓ р░░р▒Ир░др▒Б р░Хр▒Бр░Яр▒Бр░Вр░мр░╛р░▓ р░Хр▒Лр░╕р░В р░Йр░жр▒Нр░жр▒Зр░╢р░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐.", reason: "р░Ер░░р▒Нр░╣р░д р░▓р▒Зр░Хр░кр▒Лр░╡р░бр░╛р░ир░┐р░Хр░┐ р░Хр░╛р░░р░гр░В:" },
    },
    common: { yes: "р░Ер░╡р▒Бр░ир▒Б", no: "р░Хр░╛р░жр▒Б", playAgain: "р░Хр▒Кр░др▒Нр░д р░кр▒Нр░░р░пр░╛р░гр░В р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐", helplineText: "р░Ер░зр░┐р░Хр░╛р░░р░┐р░Х р░╕р░ор░╛р░Ър░╛р░░р░В р░▓р▒Зр░жр░╛ р░╕р░╣р░╛р░пр░В р░Хр▒Лр░╕р░В, р░кр▒Ар░Ор░В-р░Хр░┐р░╕р░╛р░ир▒Н р░кр▒Лр░░р▒Нр░Яр░▓р▒НтАМр░ир▒Б р░╕р░Вр░жр░░р▒Нр░╢р░┐р░Вр░Ър░Вр░бр░┐ р░▓р▒Зр░жр░╛ р░╣р▒Жр░▓р▒Нр░кр▒НтАМр░▓р▒Ир░ир▒НтАМр░Хр▒Б р░Хр░╛р░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐:", helplineNumber: "011-24300606, 155261", websiteLinkText: "р░кр▒Ар░Ор░В-р░Хр░┐р░╕р░╛р░ир▒Н р░кр▒Лр░░р▒Нр░Яр░▓р▒НтАМр░ир▒Б р░╕р░Вр░жр░░р▒Нр░╢р░┐р░Вр░Ър░Вр░бр░┐", progress: "р░кр▒Нр░░р░пр░╛р░г р░кр▒Бр░░р▒Лр░Чр░др░┐", selectLanguage: "р░нр░╛р░╖" },
  },
  kn: {
    langName: "р▓Хр▓ир│Нр▓ир▓б",
    title: "ЁЯМ╛ р▓кр▓┐р▓Ор▓В-р▓Хр▓┐р▓╕р▓╛р▓ир│Н р▓кр│Нр▓░р▓пр▓╛р▓г ЁЯМ╛",
    gameSteps: {
      characterSelection: { title: "р▓ир▓┐р▓ор│Нр▓о р▓░р│Ир▓др▓░р▓ир│Нр▓ир│Б р▓Жр▓░р▓┐р▓╕р▓┐", description: "р▓И р▓кр│Нр▓░р▓пр▓╛р▓гр▓жр▓▓р│Нр▓▓р▓┐ р▓ир▓┐р▓ор│Нр▓ор▓ир│Нр▓ир│Б р▓кр│Нр▓░р▓др▓┐р▓ир▓┐р▓зр▓┐р▓╕р▓▓р│Б р▓Тр▓Вр▓жр│Б р▓кр▓╛р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐." },
      start: { title: "р▓╕р│Нр▓╡р▓╛р▓Чр▓д, {farmerName}!", description: "р▓кр▓┐р▓Ор▓В-р▓Хр▓┐р▓╕р▓╛р▓ир│Н р▓лр▓▓р▓╛р▓ир│Бр▓нр▓╡р▓┐р▓п р▓кр│Нр▓░р▓пр▓╛р▓гр▓╡р▓ир│Нр▓ир│Б р▓Ер▓ир│Бр▓нр▓╡р▓┐р▓╕р▓┐. р▓ир│Ар▓╡р│Б р▓Ер▓░р│Нр▓╣р▓░р│З р▓ор▓др│Нр▓др│Б р▓кр│Нр▓░р▓пр│Лр▓Ьр▓ир▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Зр▓Чр│Ж р▓кр▓бр│Жр▓пр│Бр▓др│Нр▓др│Ар▓░р▓┐ р▓Ор▓Вр▓жр│Б р▓ир│Лр▓бр│Лр▓г.", button: "р▓кр│Нр▓░р▓пр▓╛р▓гр▓╡р▓ир│Нр▓ир│Б р▓кр│Нр▓░р▓╛р▓░р▓Вр▓нр▓┐р▓╕р▓┐" },
      eligibility: {
        title: "р▓╣р▓Вр▓д 1: р▓Ер▓░р│Нр▓╣р▓др▓╛ р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓ир│Ж", description: "р▓пр│Лр▓Ьр▓ир│Жр▓Чр│Ж р▓ир▓┐р▓ор│Нр▓о р▓Ер▓░р│Нр▓╣р▓др│Жр▓пр▓ир│Нр▓ир│Б р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓▓р│Б р▓И р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р▓┐р▓Чр│Ж р▓Йр▓др│Нр▓др▓░р▓┐р▓╕р▓┐.",
        questions: [{ key: 'isSmallFarmer', text: "р▓ир│Ар▓╡р│Б р▓╕р▓гр│Нр▓г р▓Ер▓ер▓╡р▓╛ р▓Ер▓др▓┐ р▓╕р▓гр│Нр▓г р▓░р│Ир▓д р▓Хр│Бр▓Яр│Бр▓Вр▓мр▓╡р│З?" }, { key: 'isLandOwner', text: "р▓ир│Ар▓╡р│Б р▓Хр│Гр▓╖р▓┐р▓пр│Лр▓Чр│Нр▓п р▓нр│Вр▓ор▓┐р▓пр▓ир│Нр▓ир│Б р▓╣р│Кр▓Вр▓жр▓┐р▓жр│Нр▓жр│Ар▓░р▓╛?" }, { key: 'isNotHighIncome', text: "р▓ир▓┐р▓ор│Нр▓о р▓Хр│Бр▓Яр│Бр▓Вр▓мр▓ж р▓Жр▓жр▓╛р▓пр▓╡р│Б р▓Ер▓зр▓┐р▓Х-р▓Жр▓жр▓╛р▓пр▓ж р▓╣р│Кр▓░р▓Чр▓┐р▓бр│Бр▓╡р▓┐р▓Хр│Жр▓п р▓ор▓╛р▓ир▓жр▓Вр▓бр▓Чр▓│р▓┐р▓Чр▓┐р▓Вр▓д р▓Хр▓бр▓┐р▓ор│Жр▓пр▓┐р▓жр│Жр▓пр│З?" }],
        button: "р▓ир▓ир│Нр▓и р▓Ер▓░р│Нр▓╣р▓др│Жр▓пр▓ир│Нр▓ир│Б р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐",
      },
      ekyc: { title: "р▓╣р▓Вр▓д 2: eKYC р▓кр│Вр▓░р│Нр▓гр▓Чр│Кр▓│р▓┐р▓╕р▓┐", description: "р▓Ер▓жр│Нр▓нр│Бр▓д! р▓ир│Ар▓╡р│Б р▓Ер▓░р│Нр▓╣р▓░р▓╛р▓Чр▓┐р▓жр│Нр▓жр│Ар▓░р▓┐. р▓ор│Бр▓Вр▓жр▓┐р▓и р▓Хр▓бр│Нр▓бр▓╛р▓п р▓╣р▓Вр▓др▓╡р│Жр▓Вр▓жр▓░р│Ж р▓ир▓┐р▓ор│Нр▓о р▓Жр▓зр▓╛р▓░р│Н р▓мр▓│р▓╕р▓┐ eKYC р▓Ер▓ир│Нр▓ир│Б р▓кр│Вр▓░р│Нр▓гр▓Чр│Кр▓│р▓┐р▓╕р│Бр▓╡р│Бр▓жр│Б. р▓╣р▓гр▓╡р▓ир│Нр▓ир│Б р▓╕р│Нр▓╡р│Ар▓Хр▓░р▓┐р▓╕р▓▓р│Б р▓Зр▓жр│Б р▓ир▓┐р▓░р│Нр▓гр▓╛р▓пр▓Хр▓╡р▓╛р▓Чр▓┐р▓жр│Ж.", button: "р▓Жр▓зр▓╛р▓░р│Н р▓Зр▓Хр│Жр▓╡р│Ир▓╕р▓┐ р▓ор│Вр▓▓р▓Х р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐", verifyingText: "р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж... р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ир▓┐р▓░р│Ар▓Хр│Нр▓╖р▓┐р▓╕р▓┐." },
      installments: { title: "р▓╣р▓Вр▓д 3: р▓ир▓┐р▓ор│Нр▓о р▓Хр▓Вр▓др│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓╕р│Нр▓╡р│Ар▓Хр▓░р▓┐р▓╕р▓┐", description: "р▓Ер▓нр▓┐р▓ир▓Вр▓жр▓ир│Жр▓Чр▓│р│Б! р▓ир▓┐р▓ор│Нр▓о р▓Цр▓╛р▓др│Ж р▓╕р▓Хр│Нр▓░р▓┐р▓пр▓╡р▓╛р▓Чр▓┐р▓жр│Ж. р▓╕р▓░р│Нр▓Хр▓╛р▓░р▓╡р│Б р▓мр▓┐р▓бр│Бр▓Чр▓бр│Ж р▓ор▓╛р▓бр▓┐р▓жр▓Вр▓др│Ж р▓ир▓┐р▓ор│Нр▓о р▓Хр▓Вр▓др│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓Хр│Нр▓▓р│Ир▓ор│Н р▓ор▓╛р▓бр▓┐.", claimButton: "тВ╣2000 р▓Хр│Нр▓▓р│Ир▓ор│Н р▓ор▓╛р▓бр▓┐", receivedStatus: "тЬЕ р▓╕р│Нр▓╡р│Ар▓Хр▓░р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж", accountBalance: "р▓ир▓┐р▓ор│Нр▓о р▓╕р▓ор│Нр▓ор▓╛р▓ир│Н р▓ир▓┐р▓зр▓┐ р▓мр│Нр▓пр▓╛р▓▓р│Жр▓ир│Нр▓╕р│Н:", status: { locked: "р▓▓р▓╛р▓Хр│Н р▓Жр▓Чр▓┐р▓жр│Ж", claimable: "р▓Хр│Нр▓▓р│Ир▓ор│Н р▓ор▓╛р▓бр▓▓р│Б р▓╕р▓┐р▓жр│Нр▓з", releasedOn: "р▓мр▓┐р▓бр│Бр▓Чр▓бр│Жр▓пр▓╛р▓Чр▓┐р▓жр│Ж" } },
      results: { eligibleTitle: "ЁЯОЙ р▓кр│Нр▓░р▓пр▓╛р▓г р▓кр│Вр▓░р│Нр▓гр▓Чр│Кр▓Вр▓бр▓┐р▓жр│Ж! ЁЯОЙ", eligibleMessage: "р▓ир│Ар▓╡р│Б р▓╡р▓░р│Нр▓╖р▓Хр│Нр▓Хр│Ж тВ╣6,000 р▓кр│Вр▓░р│Нр▓г р▓кр│Нр▓░р▓пр│Лр▓Ьр▓ир▓╡р▓ир│Нр▓ир│Б р▓пр▓╢р▓╕р│Нр▓╡р▓┐р▓пр▓╛р▓Чр▓┐ р▓кр▓бр│Жр▓жр▓┐р▓жр│Нр▓жр│Ар▓░р▓┐! р▓И р▓Жр▓░р│Нр▓ер▓┐р▓Х р▓мр│Жр▓Вр▓мр▓▓р▓╡р│Б р▓░р│Ир▓др▓░р▓┐р▓Чр│Ж р▓Ер▓╡р▓░ р▓Хр│Гр▓╖р▓┐ р▓Ер▓Чр▓др│Нр▓пр▓Чр▓│р▓┐р▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр│Бр▓др│Нр▓др▓жр│Ж.", ineligibleTitle: "р▓Ер▓░р│Нр▓╣р▓др▓╛ р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓ир│Ж р▓╡р▓┐р▓лр▓▓р▓╡р▓╛р▓Чр▓┐р▓жр│Ж", ineligibleMessage: "р▓ир▓┐р▓ор│Нр▓о р▓Йр▓др│Нр▓др▓░р▓Чр▓│ р▓Жр▓зр▓╛р▓░р▓ж р▓ор│Зр▓▓р│Ж, р▓ир│Ар▓╡р│Б р▓кр▓┐р▓Ор▓В-р▓Хр▓┐р▓╕р▓╛р▓ир│Н р▓пр│Лр▓Ьр▓ир│Жр▓Чр│Ж р▓Ер▓░р│Нр▓╣р▓░р▓▓р│Нр▓▓р▓жр▓┐р▓░р▓мр▓╣р│Бр▓жр│Б. р▓И р▓пр│Лр▓Ьр▓ир│Жр▓пр│Б р▓ир▓┐р▓░р│Нр▓жр▓┐р▓╖р│Нр▓Я р▓ор▓╛р▓ир▓жр▓Вр▓бр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр│Вр▓░р│Ир▓╕р│Бр▓╡ р▓нр│В-р▓╣р▓┐р▓бр│Бр▓╡р▓│р▓┐ р▓░р│Ир▓д р▓Хр│Бр▓Яр│Бр▓Вр▓мр▓Чр▓│р▓┐р▓Чр│Ж р▓Жр▓Чр▓┐р▓жр│Ж.", reason: "р▓Ер▓ир▓░р│Нр▓╣р▓др│Жр▓Чр│Ж р▓Хр▓╛р▓░р▓г:" },
    },
    common: { yes: "р▓╣р│Мр▓жр│Б", no: "р▓Зр▓▓р│Нр▓▓", playAgain: "р▓╣р│Кр▓╕ р▓кр│Нр▓░р▓пр▓╛р▓гр▓╡р▓ир│Нр▓ир│Б р▓кр│Нр▓░р▓╛р▓░р▓Вр▓нр▓┐р▓╕р▓┐", helplineText: "р▓Ер▓зр▓┐р▓Хр│Гр▓д р▓ор▓╛р▓╣р▓┐р▓др▓┐ р▓Ер▓ер▓╡р▓╛ р▓╕р▓╣р▓╛р▓пр▓Хр│Нр▓Хр▓╛р▓Чр▓┐, р▓кр▓┐р▓Ор▓В-р▓Хр▓┐р▓╕р▓╛р▓ир│Н р▓кр│Лр▓░р│Нр▓Яр▓▓р│НтАМр▓Чр│Ж р▓нр│Зр▓Яр▓┐ р▓ир│Ар▓бр▓┐ р▓Ер▓ер▓╡р▓╛ р▓╕р▓╣р▓╛р▓пр▓╡р▓╛р▓гр▓┐р▓Чр│Ж р▓Хр▓░р│Ж р▓ор▓╛р▓бр▓┐:", helplineNumber: "011-24300606, 155261", websiteLinkText: "р▓кр▓┐р▓Ор▓В-р▓Хр▓┐р▓╕р▓╛р▓ир│Н р▓кр│Лр▓░р│Нр▓Яр▓▓р│НтАМр▓Чр│Ж р▓нр│Зр▓Яр▓┐ р▓ир│Ар▓бр▓┐", progress: "р▓кр│Нр▓░р▓пр▓╛р▓гр▓ж р▓кр│Нр▓░р▓Чр▓др▓┐", selectLanguage: "р▓нр▓╛р▓╖р│Ж" },
  },
};

const gameJourneySteps = ['characterSelection', 'start', 'eligibility', 'ekyc', 'installments', 'end'];
const initialInstallmentState = [{status: 'locked'}, {status: 'locked'}, {status: 'locked'}];

// --- Main Component ---
const PMKisan = ({ initialLang = 'en' }) => {
  const [currentLang, setCurrentLang] = useState(initialLang);
  const [gameStep, setGameStep] = useState('characterSelection');
  const [farmerAvatar, setFarmerAvatar] = useState(null);
  const [eligibilityAnswers, setEligibilityAnswers] = useState({});
  const [isEligible, setIsEligible] = useState(false);
  const [installments, setInstallments] = useState(initialInstallmentState);
  const [isMusicPlaying, setIsMusicPlaying] = useState(false);
  const [isVerifying, setIsVerifying] = useState(false);
  const backgroundMusicRef = useRef(null);

  const langContent = useMemo(() => gameData[currentLang] || gameData.en, [currentLang]);
  const totalAmount = useMemo(() => installments.filter(i => i.status === 'received').length * 2000, [installments]);
  const progressPercent = useMemo(() => ((gameJourneySteps.indexOf(gameStep)) / (gameJourneySteps.length - 1)) * 100, [gameStep]);

  useEffect(() => { setCurrentLang(initialLang); }, [initialLang]);
  useEffect(() => { const music = backgroundMusicRef.current; music.volume = 0.1; return () => { music.pause(); if ('speechSynthesis' in window) speechSynthesis.cancel(); }; }, []);
  useEffect(() => { const stepContent = langContent.gameSteps[gameStep]; if(stepContent) { const title = gameStep === 'start' ? stepContent.title.replace('{farmerName}', farmerAvatar?.name[currentLang] || '') : stepContent.title; const text = `${title}. ${stepContent.description || ''}`; setTimeout(() => speakText(text, currentLang), 400); } }, [gameStep, currentLang, farmerAvatar]);

  // Simulate installment release
  useEffect(() => {
    if (gameStep === 'installments') {
      const timers = [
        setTimeout(() => setInstallments(prev => { const next = [...prev]; next[0].status = 'claimable'; return next; }), 1000),
        setTimeout(() => setInstallments(prev => { const next = [...prev]; next[1].status = 'claimable'; return next; }), 3000),
        setTimeout(() => setInstallments(prev => { const next = [...prev]; next[2].status = 'claimable'; return next; }), 5000),
      ];
      return () => timers.forEach(clearTimeout);
    }
  }, [gameStep]);

  const speakText = (text, langCode) => { if ('speechSynthesis' in window) { speechSynthesis.cancel(); const u = new SpeechSynthesisUtterance(text); u.lang = langCode + '-IN'; u.rate = 0.9; speechSynthesis.speak(u); } };
  const toggleMusic = () => { const music = backgroundMusicRef.current; if (isMusicPlaying) { music.pause(); } else { music.play().catch(e => console.error("Autoplay prevented:", e)); } setIsMusicPlaying(!isMusicPlaying); };

  const changeStep = (newStep) => { setGameStep('transition'); setTimeout(() => { stepSound.play(); setGameStep(newStep); }, 300); };
  
  const handleSelectAvatar = (avatar) => { clickSound.play(); setFarmerAvatar(avatar); changeStep('start'); };
  const handleStartGame = () => { clickSound.play(); changeStep('eligibility'); };
  
  const handleEligibilityChange = (key, value) => { setEligibilityAnswers(prev => ({ ...prev, [key]: value })); };
  const handleCheckEligibility = () => {
    const allYes = langContent.gameSteps.eligibility.questions.every(q => eligibilityAnswers[q.key] === true);
    if (allYes) { successSound.play(); setIsEligible(true); changeStep('ekyc'); } 
    else { failureSound.play(); setIsEligible(false); changeStep('end'); }
  };

  const handleEkycComplete = () => {
    clickSound.play();
    verifyingSound.play();
    setIsVerifying(true);
    setTimeout(() => {
      setIsVerifying(false);
      successSound.play();
      changeStep('installments');
    }, 2500);
  };
  
  const handleClaimInstallment = (index) => {
    if (installments[index].status === 'claimable') {
      successSound.play();
      setInstallments(prev => { const next = [...prev]; next[index].status = 'received'; return next; });
    }
  };
  
  useEffect(() => {
    const allReceived = installments.every(i => i.status === 'received');
    if (allReceived) { setTimeout(() => changeStep('end'), 1500); }
  }, [installments]);

  const handleRestart = () => {
    clickSound.play();
    setGameStep('characterSelection');
    setFarmerAvatar(null);
    setEligibilityAnswers({});
    setIsEligible(false);
    setInstallments(initialInstallmentState);
  };

  // --- RENDER FUNCTIONS ---
  const renderCharacterSelection = () => (
    <>
      <h2 style={styles.title}>{langContent.gameSteps.characterSelection.title}</h2>
      <p style={styles.description}>{langContent.gameSteps.characterSelection.description}</p>
      <div style={styles.avatarContainer}>
        {farmerAvatars.map(avatar => (
          <button key={avatar.id} style={styles.avatarButton} onClick={() => handleSelectAvatar(avatar)}>
            <span style={styles.avatarEmoji}>{avatar.emoji}</span>
            <span style={styles.avatarName}>{avatar.name[currentLang]}</span>
          </button>
        ))}
      </div>
    </>
  );

  const renderStartScreen = () => (
    <>
      <h2 style={styles.title}>{langContent.gameSteps.start.title.replace('{farmerName}', farmerAvatar?.name[currentLang] || '')}</h2>
      <p style={styles.description}>{langContent.gameSteps.start.description}</p>
      <button style={styles.actionButton} onClick={handleStartGame}>{langContent.gameSteps.start.button}</button>
    </>
  );

  const renderEligibilityCheck = () => (
    <>
      <h2 style={styles.title}>{langContent.gameSteps.eligibility.title}</h2>
      <div style={styles.eligibilityForm}>
        {langContent.gameSteps.eligibility.questions.map(q => (
          <div key={q.key} style={styles.eligibilityQuestion}>
            <label style={styles.questionLabel}>{q.text}</label>
            <div style={styles.radioGroup}>
              <button onClick={() => handleEligibilityChange(q.key, true)} style={eligibilityAnswers[q.key] === true ? styles.radioSelected : styles.radio}>{langContent.common.yes}</button>
              <button onClick={() => handleEligibilityChange(q.key, false)} style={eligibilityAnswers[q.key] === false ? styles.radioSelected : styles.radio}>{langContent.common.no}</button>
            </div>
          </div>
        ))}
      </div>
      <button style={styles.actionButton} onClick={handleCheckEligibility}>{langContent.gameSteps.eligibility.button}</button>
    </>
  );

  const renderEkycStep = () => (
    <>
      <h2 style={styles.title}>{langContent.gameSteps.ekyc.title}</h2>
      <p style={styles.description}>{langContent.gameSteps.ekyc.description}</p>
      <div style={styles.iconBox}>ЁЯУС тЮбя╕П ЁЯСН тЮбя╕П тЬЕ</div>
      {isVerifying ? (
        <div style={styles.verifyingBox}>
          <div style={styles.spinner}></div>
          {langContent.gameSteps.ekyc.verifyingText}
        </div>
      ) : (
        <button style={styles.actionButton} onClick={handleEkycComplete}>{langContent.gameSteps.ekyc.button}</button>
      )}
    </>
  );
  
  const renderInstallmentsStep = () => (
    <>
      <h2 style={styles.title}>{langContent.gameSteps.installments.title}</h2>
      <div style={styles.accountBalanceBox}>
        <p style={styles.accountBalanceLabel}>{langContent.gameSteps.installments.accountBalance}</p>
        <p style={styles.accountBalanceAmount}>тВ╣ {totalAmount.toLocaleString('en-IN')}</p>
      </div>
      <div style={styles.installmentsContainer}>
        {installments.map((inst, i) => (
          <div key={i} style={{...styles.installmentCard, ...styles.installmentCardStatus[inst.status]}}>
            <h4>Installment {i + 1}</h4>
            {inst.status === 'locked' && <div style={styles.statusBadge}><span>ЁЯФТ</span> {langContent.gameSteps.installments.status.locked}</div>}
            {inst.status === 'received' && <div style={{...styles.statusBadge, ...styles.statusBadgeReceived}}><span>тЬЕ</span> {langContent.gameSteps.installments.status.releasedOn}</div>}
            {inst.status === 'claimable' && <button onClick={() => handleClaimInstallment(i)} style={styles.claimButton}>{langContent.gameSteps.installments.claimButton}</button>}
          </div>
        ))}
      </div>
    </>
  );

  const renderEndScreen = () => (
    <>
      <h2 style={styles.title}>{isEligible ? langContent.gameSteps.results.eligibleTitle : langContent.gameSteps.results.ineligibleTitle}</h2>
      <p style={styles.description}>{isEligible ? langContent.gameSteps.results.eligibleMessage : langContent.gameSteps.results.ineligibleMessage}</p>
      {!isEligible && Object.values(eligibilityAnswers).includes(false) && (
        <div style={styles.reasonBox}>
            <strong>{langContent.gameSteps.results.reason}</strong>
            <ul>{langContent.gameSteps.eligibility.questions.map(q => eligibilityAnswers[q.key] === false && <li key={q.key}>{q.text} ({langContent.common.no})</li>)}</ul>
        </div>
      )}
      <div style={styles.infoBox}>
          <p>{langContent.common.helplineText}</p>
          <span style={styles.helplineNumber}>{langContent.common.helplineNumber}</span>
          <a href="https://pmkisan.gov.in/" target="_blank" rel="noopener noreferrer" style={styles.websiteLink}>{langContent.common.websiteLinkText}</a>
      </div>
      <button style={styles.actionButton} onClick={handleRestart}>{langContent.common.playAgain}</button>
    </>
  );

  const renderCurrentStep = () => {
    const stepMap = {
      characterSelection: renderCharacterSelection,
      start: renderStartScreen,
      eligibility: renderEligibilityCheck,
      ekyc: renderEkycStep,
      installments: renderInstallmentsStep,
      end: renderEndScreen,
      transition: () => <div style={styles.transitionScreen}></div>,
    };
    return (stepMap[gameStep] || renderCharacterSelection)();
  };

  return (
    <div style={styles.container}>
      <audio ref={backgroundMusicRef} src="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3" loop />
      <div style={styles.overlay}>
        <div style={styles.header}>
            <div style={styles.langSelector}>
                <label htmlFor="lang-select">{langContent.common.selectLanguage}:</label>
                <select id="lang-select" value={currentLang} onChange={e => setCurrentLang(e.target.value)} style={styles.langDropdown}>
                    {Object.keys(gameData).map(langKey => <option key={langKey} value={langKey}>{gameData[langKey].langName}</option>)}
                </select>
            </div>
            <div style={styles.headerControls}>
                {farmerAvatar && <span style={styles.avatarDisplay}>{farmerAvatar.emoji}</span>}
                <button onClick={() => { const stepContent = langContent.gameSteps[gameStep]; if(stepContent) speakText(stepContent.title + '. ' + stepContent.description, currentLang) }} style={styles.controlButton} title="Read instruction">ЁЯФК</button>
                <button onClick={toggleMusic} style={styles.controlButton} title={isMusicPlaying ? "Pause Music" : "Play Music"}>{isMusicPlaying ? 'ЁЯО╡' : 'ЁЯФЗ'}</button>
            </div>
        </div>

        <div style={styles.progressBarContainer}>
            <div style={styles.progressBar}>
                <div style={{...styles.progressIndicator, width: `${progressPercent}%`}}></div>
            </div>
        </div>

        <div style={styles.gameContent}>
          {renderCurrentStep()}
        </div>
      </div>
    </div>
  );
};

// ======================================================================
// Styles (with enhancements for new features)
// ======================================================================
const styles = {
  container: { position: 'relative', fontFamily: 'Arial, sans-serif', maxWidth: '800px', margin: '20px auto', borderRadius: '15px', overflow: 'hidden', border: '4px solid #1e8449',
    backgroundImage: `url('https://www.transparenttextures.com/patterns/green-dust-and-scratches.png'), linear-gradient(to bottom, #d8f3dc, #a8d5ba)`, backgroundSize: 'auto, cover'
  },
  overlay: { background: 'rgba(255, 255, 255, 0.6)', minHeight: '85vh', padding: '15px', display: 'flex', flexDirection: 'column' },
  header: { display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px', flexWrap: 'wrap', gap: '15px' },
  langSelector: { display: 'flex', alignItems: 'center', gap: '8px', background: 'rgba(255,255,255,0.8)', padding: '5px 10px', borderRadius: '8px', color: '#155724', fontWeight: 'bold' },
  langDropdown: { border: '2px solid #28a745', borderRadius: '5px', padding: '3px', background: 'white' },
  headerControls: { display: 'flex', gap: '10px', alignItems: 'center' },
  avatarDisplay: { fontSize: '2rem', background: 'white', borderRadius: '50%', padding: '5px', border: '2px solid #28a745' },
  controlButton: { background: 'white', border: '2px solid #28a745', borderRadius: '50%', width: '40px', height: '40px', fontSize: '1.2rem', cursor: 'pointer', display: 'flex', alignItems: 'center', justifyContent: 'center', transition: 'transform 0.1s', ':active': { transform: 'scale(0.9)' } },
  progressBarContainer: { width: '100%', marginBottom: '20px' },
  progressBar: { height: '12px', backgroundColor: 'rgba(40, 167, 69, 0.2)', borderRadius: '6px', overflow: 'hidden' },
  progressIndicator: { height: '100%', backgroundColor: '#28a745', borderRadius: '6px', transition: 'width 0.5s ease-in-out' },
  gameContent: { flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', textAlign: 'center' },
  transitionScreen: { animation: 'fadeIn 0.3s ease-in-out' },
  title: { color: '#155724', fontSize: '2.2rem', marginBottom: '15px', textShadow: '1px 1px 2px rgba(0,0,0,0.1)' },
  description: { fontSize: '1.1rem', color: '#333', maxWidth: '600px', margin: '0 auto 25px auto', lineHeight: '1.6' },
  actionButton: { padding: '12px 30px', fontSize: '1.1rem', color: 'white', backgroundColor: '#28a745', border: 'none', borderRadius: '8px', cursor: 'pointer', marginTop: '20px', transition: 'all 0.2s', boxShadow: '0 4px #1e8449', ':hover': { transform: 'translateY(-2px)' }, ':active': { transform: 'translateY(2px)', boxShadow: '0 2px #1e8449' } },
  avatarContainer: { display: 'flex', gap: '20px', flexWrap: 'wrap', justifyContent: 'center', marginTop: '20px' },
  avatarButton: { background: 'white', border: '3px solid #ccc', borderRadius: '15px', cursor: 'pointer', padding: '15px', transition: 'all 0.2s ease-in-out', display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '5px', ':hover': { borderColor: '#28a745', transform: 'scale(1.1)' } },
  avatarEmoji: { fontSize: '4rem' },
  avatarName: { fontWeight: 'bold', color: '#155724' },
  eligibilityForm: { display: 'flex', flexDirection: 'column', gap: '15px', margin: '20px 0', width: '100%', maxWidth: '500px' },
  eligibilityQuestion: { display: 'flex', justifyContent: 'space-between', alignItems: 'center', backgroundColor: 'rgba(255,255,255,0.8)', padding: '10px 15px', borderRadius: '8px', boxShadow: '0 2px 4px rgba(0,0,0,0.05)' },
  questionLabel: { textAlign: 'left', flex: 1, marginRight: '10px' },
  radioGroup: { display: 'flex', gap: '10px' },
  radio: { padding: '8px 15px', border: '2px solid #ccc', borderRadius: '5px', cursor: 'pointer', backgroundColor: 'transparent' },
  radioSelected: { padding: '8px 15px', border: '2px solid #28a745', borderRadius: '5px', cursor: 'pointer', backgroundColor: '#d4edda', fontWeight: 'bold' },
  iconBox: { fontSize: '3rem', margin: '20px 0', letterSpacing: '1rem' },
  verifyingBox: { display: 'flex', alignItems: 'center', gap: '15px', fontSize: '1.2rem', color: '#155724', fontWeight: 'bold' },
  spinner: { border: '4px solid rgba(0, 0, 0, 0.1)', width: '36px', height: '36px', borderRadius: '50%', borderLeftColor: '#28a745', animation: 'spin 1s ease infinite' },
  accountBalanceBox: { backgroundColor: 'white', padding: '15px 25px', borderRadius: '10px', boxShadow: '0 4px 10px rgba(0,0,0,0.1)', margin: '10px 0 30px 0', border: '2px solid #28a745' },
  accountBalanceLabel: { margin: 0, color: '#555', fontSize: '1rem' },
  accountBalanceAmount: { margin: '5px 0 0 0', color: '#155724', fontSize: '2.5rem', fontWeight: 'bold' },
  installmentsContainer: { display: 'flex', gap: '20px', justifyContent: 'center', width: '100%', flexWrap: 'wrap' },
  installmentCard: { flex: '1 1 200px', backgroundColor: 'white', padding: '20px', borderRadius: '8px', boxShadow: '0 2px 5px rgba(0,0,0,0.1)', border: '2px solid', transition: 'all 0.3s' },
  installmentCardStatus: { locked: { borderColor: '#ccc', backgroundColor: '#f8f9fa' }, claimable: { borderColor: '#007bff', transform: 'scale(1.05)' }, received: { borderColor: '#28a745', backgroundColor: '#f0fff4' } },
  statusBadge: { display: 'flex', alignItems: 'center', gap: '8px', justifyContent: 'center', padding: '8px', borderRadius: '5px', background: '#e9ecef', color: '#495057', fontWeight: 'bold' },
  statusBadgeReceived: { background: '#d4edda', color: '#155724' },
  claimButton: { padding: '10px 20px', fontSize: '1rem', color: 'white', backgroundColor: '#007bff', border: 'none', borderRadius: '5px', cursor: 'pointer', ':disabled': { backgroundColor: '#ccc' } },
  infoBox: { textAlign: 'center', backgroundColor: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: '8px', padding: '20px', marginTop: '20px', maxWidth: '600px', margin: '20px auto' },
  reasonBox: { textAlign: 'left', backgroundColor: '#fbe9e7', border: '1px solid #ffab91', color: '#c62828', borderRadius: '8px', padding: '15px', margin: '0 auto 20px auto', maxWidth: '600px', '& ul': { paddingLeft: '20px' } },
  helplineNumber: { display: 'block', fontSize: '1.5rem', fontWeight: 'bold', color: '#155724', margin: '10px 0' },
  websiteLink: { display: 'inline-block', padding: '10px 25px', backgroundColor: '#28a745', color: 'white', textDecoration: 'none', borderRadius: '5px', fontWeight: 'bold', marginTop: '10px' },
};

// Add keyframes for animations to the document head
const styleSheet = document.createElement("style");
styleSheet.type = "text/css";
styleSheet.innerText = `
@keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }
@keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
`;
document.head.appendChild(styleSheet);


export default PMKisan;